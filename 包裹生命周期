#define _CRT_SECURE_NO_WARNINGS
#include <stdlib.h>
#include <stdio.h>  // 提供输入输出函数，如printf、scanf、fopen、fprintf、fclose等
#include <time.h>   // 提供时间相关的函数和数据类型，如time、difftime
#include <string.h> // 提供字符串处理函数，如strcmp
#include <windows.h> // 用于 Windows 系统下的高精度时间获取
#include"redblacktree.h"
#include"hash.h"
#include"log.h"
//#include"list.h"
//#include <pthread.h> // 提供线程相关的函数和数据类型，用于创建和管理线程#ifdef _WIN32
   // Windows-specific code
typedef struct Goods goods;
typedef long long ll;//LL
static int sequence = 0;
int generateRandomCode(void) {
    return rand() % 1000; // 生成 0 - 999 的随机数
}
RBTree* Root;
// 生成唯一订单号
void generateOrderNumber(char* orderNumber) {
    // 获取当前时间
    time_t currentTime = time(NULL);
    // 生成随机数
    int randomCode = generateRandomCode();
    // 自增序列
    sequence = (sequence + 1) % 1000;
    // 格式化订单号
    sprintf(orderNumber, "%ld%03d%03d", currentTime, randomCode, sequence);
}
// 生成四位数取件码，使用毫秒级时间
/*void generatePickupCode(char* pickupCode, char shelfArea, int layer) {
    FILETIME ft;
    GetSystemTimeAsFileTime(&ft);
    ULARGE_INTEGER ui;
    ui.LowPart = ft.dwLowDateTime;
    ui.HighPart = ft.dwHighDateTime;
    long long milliseconds = (ui.QuadPart - 116444736000000000LL) / 10000;
    int msPart = milliseconds % 100;
    sprintf(pickupCode, "%c%d%02d", shelfArea, layer, msPart);
}
*/
// 出库订单结构体
HashTable* ht;
typedef struct {
    char order_id[20];    // 订单号
    char phone[20];       // 联系电话
    time_t create_time;   // 订单创建时间戳
    time_t outbound_time; // 出库时间戳
    int status;           // 状态标记（0=待出库，1=已出库）
    goods* Good;//货物订单
    char shelf[6];//货物柜
} OutboundOrder;
typedef struct {
    int num[10];//num最多到3000 对A B C D E F 每个柜子进行维护
    char ch;//ch可以在A到F 1 2 3 4 5 6
}Intelligent_schedule_number;
Intelligent_schedule_number NUM;
void confirm_outbound(OutboundOrder* order) {
    // 文字提示+信息显示
    printf("\n====== 出库二次确认 ======\n");
    printf("订单号: %s\n电话\n", order->order_id);

    // 确认逻辑
    char confirm;
    scanf_s(" %c", &confirm);

    if (confirm == 'Y' || confirm == 'y') {
        order->outbound_time = time(NULL); // 记录出库时间
        order->status = 1;
        printf("出库成功"); //
    }
    else {
        printf("出库取消");
    }
}
// 时间差计算（单位：小时）
double get_time_diff(time_t start, time_t end) {
    return difftime(end, start) / 3600.0;
}
// 包裹生命周期状态判断
void Intelligent_schedule(OutboundOrder* order);//智能调度
void check_expiration(OutboundOrder* order) {
    time_t now = time(NULL);
    if (order->status == 0) { // 待出库订单
        double warehouse_hours = get_time_diff(order->create_time, now);
        if (warehouse_hours > 48) { // 超过48小时未出库
            printf("仓库滞留超时");
        }
    }
    else { // 已出库订单
        double transit_hours = get_time_diff(order->outbound_time, now);
        if (transit_hours > 72) { // 超过72小时未送达
            printf("运输超时");
        }
    }
}
void GenerateOrder(RBTree* Root)
{
    OutboundOrder* ptr = (OutboundOrder*)malloc(sizeof(OutboundOrder));
    if (!ptr)
    {
        printf("PTR hasnot enough memory");
    }
    goods* Goods = (goods*)malloc(sizeof(goods));
    ptr->Good = Goods;
    printf("请输入货物的名字和属性和重量");
    //scanf_s("%50s %d %lf", ptr->Good->name, &(ptr->Good->p_type), &(ptr->Good->weight));
    scanf_s("%50s", ptr->Good->name, sizeof(ptr->Good->name));
    scanf_s("%d", &(ptr->Good->p_type), sizeof(ptr->Good->p_type));
    scanf_s("%lf", &(ptr->Good->weight),sizeof(ptr->Good->weight));
    generateOrderNumber(ptr->order_id);
    RBTreeNode* tmp;
    if (Root->root == NULL)
        tmp = newNode(ptr->order_id, Root);
    else
        tmp = Add_node(ptr->order_id, Root);
    printf("Right");
    ptr->create_time = time(NULL);
    printf("Right");
    printf("请输入联系电话");
    scanf_s("%s", ptr->phone,sizeof(ptr->phone));
    //把订单号放到user里面
    User* user = hash_search(ht, ptr->phone);
    if (user) {
        printf("找到用户：%s，手机号：%s\n", user->name, user->tel);
    }
    else {
        printf("未找到该用户\n");
    }
    Add_list(user->head, ptr, user->tail, user->length);
    ptr->status = 0;//创建时未出库
    Intelligent_schedule(ptr);//智能调度
    log_operation("入库",ptr->order_id, "管理员");
    FILE* fp = fopen(ptr->phone, "a");
    if (!fp)
    {
        perror("ERROR!");
    }
    fprintf(fp,"手机号为%s\t 订单号为%s\t 订单创建时间为%s\t 货物的名字为%s\t 属性为%d\t 货物柜为%s\t 货物重量为%lf\n",
        ptr->phone,ptr->order_id,ptr->create_time,ptr->Good->name,ptr->Good->p_type,ptr->shelf,ptr->Good->weight);
    fclose(fp);
}
void Intelligent_schedule(OutboundOrder*order)//智能调度
{
    char ch;
    int k = 0;
    switch (order->Good->p_type) {
    case 1:
        ch = 'A';
        break;
    case 2:
        ch = 'B';
        break;
    case 3:
        ch = 'C';
        break;
    case 4:
        ch = 'D';
        break;
    case 5:
         k = rand() % 2;
        if (k)//普通
            ch = 'E';
        else ch = 'F';
        break;
    }
    int n = ch - 'A';
    if (NUM.num[n] == 3000)
       NUM.num[n] = 0;
    int i = NUM.num[n];
        char* shelf = order->shelf;
        shelf[0] = ch;
        shelf[1] = '0' + i / 1000;
        i %= 1000;
        shelf[2] = '0' + i / 100;
        i % 100;
        shelf[3] = '0' + i / 10;
        i %= 10;
        shelf[4] = '0' + i;
}
void Pickup(RBTree* Root, OutboundOrder* order)
{
    printf("输入你的手机号和密码\n");
    char tel[20], mima[20];
    scanf_s("%s", &tel);
    if ((!strcmp(tel, order->phone)))
        confirm_outbound(order);
    log_operation("出库", order->order_id,order->phone);
    OutboundOrder* ptr = order;
    FILE* fp = fopen(ptr->phone, "a");
    if (!fp)
    {
        perror("ERROR!");
    }
    fprintf(fp, "手机号为%s\t 订单号为%s\t 出库时间为%s\t 货物的名字为%s\t 属性为%d\n", ptr->phone, ptr->order_id, ptr->outbound_time,ptr->Good->name,ptr->Good->p_type);
    fclose(fp);
    User* user = hash_search(ht, ptr->phone);
    if (user) {
        printf("找到用户：%s，手机号：%s\n", user->name, user->tel);
    }
    else {
        printf("未找到该用户\n");
    }
    //删除订单
    list* tmp = Find_char_list(ptr->order_id, user->head);
    Delete_list(tmp, user->head, user->tail, user->length);
    free(order->Good);
    free(fp);
    RBTreeNode*ntmp= Find_key((int)ptr->phone,Root);
    Delete(ntmp, Root);
}
void Inquiry_order(RBTree* Root, char* order_id) {
    RBTreeNode* tmp = Find_key((int)order_id, Root);
    OutboundOrder* ptr1 =(OutboundOrder*) tmp->ptr;
    printf("手机号为%s", ptr1->phone);
    if (ptr1->status)
        printf("货物已出库");
    else
        printf("货物未出库");
}
int main() {
    srand((int)time(NULL)); // 只设置一次随机数种子
    Root = (RBTree*)malloc(sizeof(RBTree));
    Root->root = NULL;
    ht = hash_init(5301);
    GenerateOrder(Root);
    RBTreeNode* first = Root->root;
    OutboundOrder* ptr = (OutboundOrder*)first->ptr;
    Pickup(Root,ptr);
    Inquiry_order(Root, ptr->order_id);
    Clear_RBTREE(Root->root);
    free(Root);
    return 0;
}
