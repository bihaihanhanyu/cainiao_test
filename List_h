#ifndef List_h
#define List_h

#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<errno.h>
typedef struct  List list;
struct List{
    int data;
    list*pre;//前一项
    list*next;//后一项
};
list*head;
list*tail;
int length=0;//链表的长度
static void Isolate_list(list*temp);
void Inihead(void)
{
    head=(list*)malloc(sizeof(list));
    head->data=0;
    head->pre=NULL;
}
void Initail(void)
{
    tail=NULL;
}

//type 1 第2种链表,head不存内容
void Add_list(int ndata)//尾插法
{
    list*temp=(list*)malloc(sizeof(list));
    temp->data=ndata;
    temp->next=NULL;
    temp->pre=NULL;
    if(head==NULL)
        tail=head->next=temp;
    else{
        tail->next=temp;
        temp->pre=tail;
        tail=temp;
    }
    length++;
}

list* Find_list(int num)//返回第num个链表的位置
{
    //num等于零的时候相当于返回head指针
    list*temp=head;
    for(int i=0;i<num;i++) temp=temp->next;
    return temp;
}
void Delete_list(list*p)
{
    if(p==head)
        printf("You cannot delete head ptr.",errno);
    if(length==1)
        head->next=tail=NULL;
    else
    {
        if(p->next)
        {
            p->next->pre=p->pre;
            p->pre->next=p->next;
        }
       else
        {
            tail=p->pre;
            p->pre->next=NULL;
        }
    }
    length--;
    free(p);
}
void Insert_list01(list*prev,list*temp)//第一种插入方法
{//prev插入位置前一项的指针  temp是要进行插入操作的指针
    Isolate_list(temp);//隔离temp
    if(prev->next)
    {
        list*prev__next=prev->next;
        prev__next->pre=temp;
        temp->next=prev__next;
    }
    else
    {
        temp->next=NULL;
        tail=temp;
    }
    prev->next=temp;
    temp->pre=prev;
    
}

void Insert_list02(list*prev,int ndata)//第二种插入方法//可以用它来实现头插法
{//prev插入位置前一项的指针  data是新生成的链表的data域
    list*temp=(list*)malloc(sizeof(list));
    temp->data=ndata;
    if(prev->next)
    {
        list*prev__next=prev->next;
        prev__next->pre=temp;
        temp->next=prev__next;
    }
    else
    {
        temp->next=NULL;
        tail=temp;
    }
    prev->next=temp;
    temp->pre=prev;
    length++;
}
void Clear_list(void)
{
    list*temp=head;
    while(temp!=NULL)
    {
        list*temp01=temp;
        temp=temp->next;
        free (temp01);
    }
    head->next=NULL;
    length=0;
}
static void Isolate_list(list*temp){//把temp这个链表的部分隔离出来
    //static  说明只能在这个头文件里面使用
    list*temp__next=temp->next;
    list*temp__pre=temp->pre;
    if(!temp->next)
        tail=temp__pre;
    else temp__next->pre=temp__pre;
    temp__pre->next=temp__next;
    return;
}
void Exchange_list(list*a,list*b){//交换a和b
    //首先确定一点，a和b是否为head->next对各种操作没有影响
    //需要特判的地方有 a/b为尾指针，a/b相连,a/b既有尾指针，有有相连的情况
    if(a==b)return;
    if(a->pre==b||a==tail)//都让a在b的前面
    {
        list*temp=a;
        a=b;
        b=temp;
    }
    list*a_pre=a->pre;
    list*a_next=a->next;
    list*b_pre=b->pre;
    list*b_next=b->next;
    int mark=(b==tail);//标记初始位置b是否为尾指针
    if(a->next!=b)
    {
        a_next->pre=b;
        b->next=a_next;
        b_pre->next=a;
        a->pre=b_pre;
    }
    else
    {
        b->next=a;
        a->pre=b;
    }
    
    b->pre=a_pre;
    a_pre->next=b;
    a->next=b_next;
    if(mark)
    b_next->pre=a;
}
list* Find_num_list(int num)//返回的是第一个data域匹配num的指针位置
{
    list* temp=head;;
    while(temp!=NULL&&temp->data!=num)temp=temp->next;
    return temp;
}
int Empty_list(void)
{
    return head->next==NULL;
}
#endif
